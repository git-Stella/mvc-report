{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1 id="kmom01">Kmom01</h1>
    <p>Jag har tidigare studerat objekt orienterad python i oopython kursen. 
    Utöver det har jag inte särskilt mycket erfarenhet med objekt orienterad kodning. 
    Att skapa klasser är ganska enkelt. Du definierar helt enkelt med "class (namn)" och sedan har det inom {}. 
    Inanför kan du definiera olika värden eller funktioner som klassen har som du kan kalla på. 
    Hittils så tycker jag koden fortfarande är ganska svår att förstå exakt hur det fungerar. Jag vet hur vi lägger till mer. 
    Däremot så förstår jag inte riktigt varför saker fungerar som det gör ännu som helhet och behöver mer tid att kolla igenom. 
    Hela idéen med controllers känns väldigt smidigt dock, samma med att använda templates för sidorna och hur extend fungerar för att justera innehåll. 
    Personligen så finner jag delarna i "php the right way" artikeln som handlar direkt om att lista användbara resurser mest användbar. "Resources". 
    Denna listar bland annat folk som skriver om php och olika verktyg du kan ha nytta av, vilket är något som man skulle kunna ha stor nytta av själv framöver. 
    TIL mest hur formatering är med objekt i php. Utöver det så har jag mest försökt förstå mig på hur symfony är uppbyggt.</p>
    <h1 id="kmom02">Kmom02</h1>
    <h2>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h2>
    <p>Arv är ganska simpelt. Det har med att en klass kan "ärva" egenskaper av en annan klass som den "extendar". Detta har fördelen att man kan undvikda 
    att göra om samma funktioner och egenskaper till väldigt snarlika klasser. Eller för att kunna specialisera till lite annorlunda varianter av samma klass. 
    Ofta så vill man kunna återanvända funktioner från en klass inom en annan, då fungerar arv bra att ta nytta av för detta syfte. 
    Komposition, väldigt likt så kallad aggregation, innebär att en klass används inom en annan klass. Skyllnaden mellan dessa är att komposition så kan det inte 
    existera på egen hand medans med aggregation så kan klassen existera utan sin "förälder". 
    En interface är ett sätt att kunna formatera funktioner som fungerar på ett visst sätt med en viss typ av inmatning och viss typ av utskrift. Tillexempel att 
    denna funktionen får en variable av typen string inmatad och den kommer att skicka tillbaka en string. Eller void, eller något annat. Jag använder mig av interface 
    i nästan alla funktioner inom klasserna jag har gjort. 
    Trait har att göra med att kunna återanvända funktioner oberoende av klasser. Till exempel i våran kod har vi våra public functions i våra controllers. 
    Dessa funktioner kan då kallas på oberoende av klass och är ett sätt att kunna återanvända liknande kod delar utan att behöva använda sig av arv. </p>
    <h2>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h2>
    <p>Jag valde att använda mig av arv via att ha separata kortlekar för en med och en utan jokrar. 
    Jag tror att jag gjorde mina Card mycket mer komplicerade än vad jag behövde, tog mig lång tid innan jag insåg att jag bara kunde kopiera in utf tecknen för 
    varje färg in i min kod och inte behövde konvertera strings av färgen till utf-8 koden för varje symbol. Därmed nyttjar jag bara det enklare sättet i mina API sidor då 
    jag gjorde dem sist. Tills jag var tvungen att göra om uppgiften då jag gick tillbaka och gjorde på det enklare sättet till att börja med. Jag hade även problem med att få min api/deck/draw/number att bli som jag ville. 
    Försökte få formuläret att kunna ändra på vad för number det blev. 
    Men till slut gav jag upp på det och valde att bara ha specifika val som skickade in olika värden med hur många kort som skulle dras. Mina sidor att visa upp hela kortleken 
    interagerar inte med sessionen då det verkade inte lägga till något. Jag valde att bara återställa det via shuffle eller reset. Jag har även en del ställen där jag skriver samma kod igen 
    som jag gärna kunnat göra om till funktioner för att få mer DRY kod ser jag.</p>
    <h2>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h2>
    <p>Symfony känner jag att jag börjat få ganska bra förståelse för nu ändå. Att allting bryts upp i det tre delarna med klasserna för M, vyerna för V och våra controllers C gör det lättare att 
    leta reda på olika delar av koden. Jag gillar att ha det nedbrytet och organiserat på så här sätt.</p>
    <h2>Vilken är din TIL för detta kmom?</h2>
    <p>Känner att jag har bättre koll på hur arv fungerar och hur man kan använda klasser relativt till varandra än tidigare. Sen visste jag inte om hur man kunde göra speciella tecken 
    i vanlig html kod.</p>


    <h1 id="kmom03">Kmom03</h1>
    <h2>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h2>
    <p>Flödesdiagramet kändes som det hjälpte ganska mycket att hjälpa med att visualisera hur det bör se ut på ett tydligt sätt. 
    Pseudokod är något som jag ofta gör när jag kodar även om jag inte ofta har kvar det eller dokumenterar det. Men jag tror ändå att göra det innan jag börjat koda alls 
    var något som inte kändes särskilt bra enligt mig. Jag brukar göra det då jag kommer till en funktion för att försöka visualisera hur den ska vara uppbyggd ungefär. 
    Men att behöva göra den innan jag börjat tycker jag det är svårt att kunna tänka helt abstrakt hur individuella funktioner i mina klasser bör fungera. </p>

    <h2>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h2>
    <p>Jag återanvände Card, DeckOfCards och DeckOfJokers från tidigare kursmoment här. Utöver dessa så gjorde jag även klassen player och bank. Där bank ärver från 
    player, då båda behöver liknande funktioner med att beräkna hur många poäng deras hand är värd och hur de drar kort och lägger till handen. 
    Annars använder jag mig mest av session för att hålla allting som det är och använder mig av flera olika routes för när funktionerna ska användas. 
    Hade det varit javascript vi programmerade i hade jag nog använt mig av eventlisteners för att kunna ha färre sidor som behöver laddas om och minska routes. 
    Men jag är inte säker på hur man skulle göra motsvarande i php så jag höll mig till att använda knappar och länkar för att kunna dra kort via routes eller bestämma 
    om spelaren är nöjd. Banken drar kort tills den har 17, då finns det en 10% chans att den tar ett kort till eller så stannar den. 
    Hade jag velat förbättra koden hade jag nog försökt göra något så allting kunde hända på en eller två html sidor. För att göra det mer lättanvändligt. 
    Jag hade nog också byggt in mer failsafes i mina klasser så att den kan reagera om spelaren gör något "otilåtet". Det var inte en stor prioritering här 
    för med hur man interagerar med klasserna via hemsidan är det inte så stor risk för att till exempel få helt slut på kort i kortleken. </p>

    <h2>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h2>
    <p>Jag tycker att det fungerar ganska bra. Olika delar av koden blir tydligt uppdelade vilket gör det enklare att veta vart man bör sätta olika typer av kod. 
    Trots det stora antalet filer är det enkelt att navigera, vilket enligt mig är en enorm fördel. Jag har ingenting negativt att säga om att programmera i symfony egentligen. 
    Det enda är nog att vissa delar kanske känns som att jag har lite mindre föståelse för än om jag hade byggt upp allting från grunden. Men de delarna har vi inte arbetar i ännu så 
    det beror nog på vad vora nästa uppgifter är om jag ändrar min åsikt kring det.</p>

    <h2>Vilken är din TIL för detta kmom?</h2>
    <p>Mestadels så är detta ett bra exempel på hur vi kan återanvända klasser i olika uppgifter. Jag valde även att hålla på mer med arv för att få mer förståelse av det. </p>

    <h1 id="kmom04">Kmom04</h1>
    <h2>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</h2>
    <p>Just att skriva tester är ganska simpelt även om det känns väldigt meningslöst om man redan har fått koden att fungera. 
    phpunit i sig är väldigt otydlig att läsa vad det är den klaggar på innan man har mer erfarenhet med det men jag känner att jag börjat förstå nu. 
    Vissa metoder är väldigt svåra att kunna ta med i phpunit tester och kan därmed behöva ändras för uppgiftens skull även om det gör metoderna sämmre. 
    Men det finns fördelar att kunna få en överblick på vad olika delar av koden gör och att dubbelkolla så det fungerar som man tror att man har fått till det. 
    Annars känns det nog som att det är större poäng att skriva testerna delvis innan man är helt färdig för att kunna gradvis kolla att man får till att koden uppnår 
    kraven.</p>

    <h2>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h2>
    <p>Om man bortser fron controllers så har jag uppnåt 100% kodtäckning. Så jag lyckades ganska bra. </p>

    <h2>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</h2>
    <p>Min kod är nu väldigt testbar, jag tror inte jag skulle kunna testa mina controllers särskilt bra dock och vill inte förstöra det jag gjort i tidigare uppgifter för att uppnå det. 
    </p>

    <h2>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</h2>
    <p>Mest gjorde jag små förändringar för att lättare kunna få något returnerat att testa så det gick bra. Men utöver det så var jag tvungen att ta bort 
    flera delar av min kod jag tyckte var väldigt bra, som gjorde att det fanns olika odds att banken gjorde olika saker, därför att testa de delarna av metoderna var 
    nästan omöjligt. Därför var jag tvungen att försämmra min kod för att göra den mer testbar och ta bort funktionalitet jag jobbat på att implementera sedan tidigare. 
    Jag hade velat pröva göra något med mocking men det var inget som returnerades som var där jag hade chans baserat jag behövde kolla.</p>

    <h2>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h2>
    <p>På ena sidan så betyder det att allting måste vara indelat i mer metoder för att kunna få bra utsträckning i testningen vilket är positivt. Men i några 
    fall var jag också tvungen att göra så att koden blev mindre ren, eller ta bort funktionalitet, för att kunna ens få testerna att gå igenom. </p>

    <h2>Vilken är din TIL för detta kmom?</h2>
    <p>Jag har idag lärt mig att ibland bör jag inte försöka göra något extra utan bör hålla det simpelt. Det blir enklare så och medför inte något mycket att försöka göra mer. </p>

    <h1 id="kmom05">Kmom05</h1>

    <h2>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</h2>
    <p>Jag tyckte det gick mycket bra med övningen. Det som kändes mest ovant var hur vi inte jobbar i databasen direkt särskilt mycket, särskilt om man använder 
    sqlite som jag valde att göra. Istället programmerar vi i php och doctrine hanterar att konvertera så att det påverkar databasen. Jag föredrar nog egentligen 
    detta sättet att arbeta med databaser. Märkte också att man får ganska mycket "gratis" via doctrine, vilket gör det mycket smidigare. </p>

    <h2>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</h2>
    <p>Det mest intressanta att säga är nog att jag valde att i princip allting går att komma åt via tabellen med alla böckerna. Att lägga till en ny bok, 
    att klicka på en specifik bok och via den sidan kan man sedan klicka vidare för att radera eller redigera boken. Det kändes som ett vettigt sätt att 
    bygga upp hemsidan och strukturera det. </p>

    <h2>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</h2>
    <p>Jag föredrar detta sättet att jobba med CRUD. Annars när man jobbar med databaser så behöver man ha båda databasen och annat redo i terminalen. Så 
    ofta behövs det att ha flera terminaler öppna samtidigt när man arbetar med det vilket gör arbetsprocessen stökigare. Det känns mycket att göra som vi gjort nu med doctrine. 
    Det betyder också att nästan all kodningen sker i php, och det som inte görs det är i html. Till skyllnad från när man normalt sett jobbar med databaser och behöver 
    hålla kolla på syntax i hur databasen programmeras också. </p>

    <h2>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</h2>
    <p>Som jag diskuterade tidigare så tycker jag om detta sättet. Att vi kodar i samma kodspråk som resten görs i är en mycket stor fördel anser jag. 
    Problemet är att då ett ORM verktyg gör konverteringarna skulle det kunna vara så att man har sämmre koll på hur databasen är uppbyggd och var lite svårare 
    att justera databasen om det behövs. Jag hade en del problem med att databasen inte ville acceptera ändringar för att tabeller redan fanns och var tvungen att 
    helt ta bort de tidigare versionerna för att fixa problemet. Men jag anser att fördelarna är värda det.</p>

    <h2>Vilken är din TIL för detta kmom?</h2>
    <p>Mestadels så lärde jag mig mer om hur man kan integrera databaser i ett projekt via ORM. Vilket kan expandera vad man kan göra på en hemsida ganska mycket. </p>

    <h1 id="kmom06">Kmom06</h1>
    <p>Here goes text</p>
    <h1 id="kmom10">Kmom10</h1>
    <p>Here goes text</p>
{% endblock %}
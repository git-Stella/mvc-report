{% extends "base.html.twig" %}

{% block title %}Analysis{% endblock %}

{% block body %}
    <h1>Introduktion</h1>
    <h2>Code size</h2>
    <p>
        Kodens storlek, mäts oftast i lines of code (LOC) eller source line of codes (SLOC), dessa refererar dock till samma sak. 
        Det kan delas upp i fler delar, de vanligaste är physical lines of code, vilket är hur många rader kod det är förutom kommentarer, 
        logical lines of code vilket handlar om hur många rader av kod som exekveras. Ibland räknas comment lines också separat. 
        Att ha väldigt många LOCs kan göra en koden ineffektiv och svårare att justera eller att felsöka exakt vad ett fel kan vara. 
    </p>
    <h2>Duplication</h2>
    <p>
        Code duplication är hur ofta som samma kod skrivs om. Vilket om den är hög är ett starkt tecken att man borde göra om delar av koden till 
        egna funktioner/metoder. Den kod biten behöver inte upprepas i samma fil, men om den återanvänds i många olika filer i samma projekt är det ett tecken 
        att även då det skulle gjorts om till en funktion som importeras till de olika filerna. 
    </p>
    <h2>Coupling</h2>
    <p>
        Coupling är hur sammanlänkade olika filer i koden är, tillexempel har man hög coupling om en fil bara fungerar med en importerad modul från en annan fil. 
        Helst vill du ha så låg coupling som möjligt. Ofta är det så att låg coupling innebör hög cohesion. 
        (Visa några exempel från min kod)
    </p>
    <h2>Cohesion</h2>
    <p>
        Cohesion är hur bra metoderna inom en klass hänger ihop. Tillexempel att de fungerar på liknande sätt. Ofta delas den in i olika typer av cohesion, till exempel 
        coincidental cohesion, där olika metoder bara grupperas utan någon tydlig anledning, eller logical cohesion (LCOM) där metoderna används för liknande saker eller på liknande sätt 
        men kanske saknar andra anledningar varför de bör hänga ihop. Till exempel att ha en folder för alla controllers eller att man sätter alla views på ett ställe. Den som ofta anses bäst kallas 
        functional cohesion och går ut på att gruppera metoder, klasser eller filer efter att de tillsammans ska jobba tillsammans till en specifik del av projektet. 
    </p>
    <h2>Complexity</h2>
    <p>
        Hur komplicerad koden är. Till exempel att den kräver många specifika värden som definieras utanför klassen eller att den går igenom 
        många steg för att göra något på ett svårläsligt sätt. 
        (Visa några exempel från min)
    </p>
    <h2>CRAP</h2>
    <p>
        Är ett sätt att mäta kod som är komplex och inte täcks av automatiska tester. Detta gör det svårt att testa, ändra eller försöka fixa 
        problem med koden. Om koden är för komplex för att testa ordentligt så får det en högre CRAP score. Formeln går CRAP(m) = comp(m)^2 * (1 – cov(m)/100)^3 + comp(m) där 
        comp(m) är hur komplex koden är och cov(m) är hur bra koden täcks av tester. 
    </p>

    <h1>PHPmetrics</h1>
    <p>
        <img src="{{ asset('img/phpmetricsmaintain.png') }}" alt="Maintenance">
        Främsta problemen som dyker up är stor komplexitet i vissa filer. Till exempel så har min DeckOfCards klass ganska hög cyclomatic complexity på 14. 
        <img src="{{ asset('img/metricscards.webp') }}" alt="DeckOfCardsStatistics"> 
        Det är också dåligt på maintainability index för flera av mina filer, särskilt utan kommentarer: 
        <img src="{{ asset('img/phpmetricsmaintainnocom.png') }}" alt="Maintenance without comments">
        Utöver det så saknar även mina controllers cohesion mellan sina metoder i många fall. 
        Flera av routes fungerar väldigt olika och därmed gör cohesion mycket lägre. De har även i flera fall hög coupling då flera av mina controllers använder sig av många externa klasser. 
        Till exempel GameController har väldigt låg cohesion mellan sina metoder (LCOM=3). Den är också komplex och har stort antal metoder som teoretiskt hade kunnat trimmas, men då detta är för att kunna använda sig av POST för att göra ändringar i databasen 
        så tror jag den är bäst att lämna som den är. 
        För att summera så är complexity och och coupling ganska hög i många filer, till exempel DeckOfCards har mycket hög complexity, cohesion är relativt låg i många filer. De mest komplicerade metoderna har bra test coverage vilket 
        hjälper hålla CRAP score nere. 
        <img src="{{ asset('img/phpmetricsdata.webp') }}" alt="Data">
    </p>

    <h1>Scrutinizer</h1>
    <a href="https://scrutinizer-ci.com/g/git-Stella/mvc-report/badges/quality-score.png?b=main">
        <img src="https://scrutinizer-ci.com/g/git-Stella/mvc-report/badges/quality-score.png?b=main" alt="scrutinizer">
    </a>
    <a href="https://scrutinizer-ci.com/g/git-Stella/mvc-report/?branch=main">
        <img src="https://scrutinizer-ci.com/g/git-Stella/mvc-report/badges/coverage.png?b=main" alt="coverage">
    </a>
    <a href="https://scrutinizer-ci.com/g/git-Stella/mvc-report/?branch=main">
        <img src="https://scrutinizer-ci.com/g/git-Stella/mvc-report/badges/build.png?b=main" alt="coverage">
    </a>
    <p>
        Det stora felet som scrutinizer hittar är att det saknas test coverage på många filer. Utöver det så har den hittat några specifika problem. GameController och 
        CardTest har båda oanvänd kod. Utöver det så är det problemen som scrutinizer hittar med kod som antingen automatiskt genereras av program vi använder som 
        doctrine eller inom filer vi laddade ner. Men för något specifikt som vore bra att justera så är det problem med dokumentationen till ProductRepository documentationen står det att den returnar 
        [][] vilket inte är rätt sätt att skriva. Det ska stå att en array returneras. 
        <img src="{{ asset('img/scrutinizerissues.webp') }}" alt="Issues">
        Går jag in på sidan om kod så syns det att flera av mina filer har relativt stor kod komplexitet. DeckOfCards den värsta med 22 complexity, den har däremot 100% code coverage. 
        I överlag så ser det som scrutinizer kollar på ganska bra ut. Har visst problem med relativt hög complexity i vissa filer dock. 
        <img src="{{ asset('img/scrutinizerpage1.webp') }}" alt="Some file examples">
        Däremot anser scrutinizer att min kod är väldigt bra och hittar inte många stora problem. Men många av mina controllers har hög CRAP score då de inte täcks av testerna. 
    </p>
    <img src="{{ asset('img/scrutinizerstats.webp') }}" alt="Very good"> 
    <p>
        Det viktigaste att tänka på från scrutinizer är igen kod komplexitetet och att det saknas mycket coverage av testerna. Annars bara små fel som inkorrekt dokumentation som bör fixas. 
    </p>

    <h1>Förbättringar</h1>
    <p>
        Jag tänker göra några små fixar som att ta bort kod som inte används eller att ha bättre dokumentation för att öka maintainability index.  
        Jag tänker även kolla över om jag kan förenkla några av mina klasser eller trimma bort oanvända metoder, främst i DeckOfCards då den är mest komplicerad.  
        Jag vill också trimma bort en del av mina kommentarer som var där mest för min egen skull som anteckningar för att kunna dra ner på LOC. 
        Båda DeckOfCards och DeckOfJokers visas som stora röda cirklar i phpmetrics, så jag hoppas att genom att göra DeckOfCards simplare så kan jag få båda att ha högre maintainability och lägre complexity. 
        Kommentarer och dokumentation kan hjälpa få upp maintainability vilket jag vill pröva. 
        Det jag hoppas mest på är att min maintainability kan gå upp och min complexity ner. Jag skulle också vilja kunna trimma LOC något men det har mindre prioritering än det andra delarna. 
        Så jag tänker fokusera på att fixa några små problem med koden, göra några filer som till exempel DeckOfCards simplare och minska storleken på flera filer. Utöver det vill jag även öka maintainability, kan bland annat lägga till bättre kommentering för att öka det. 
        Jag tänkte öka coverage men att testa repository och entity med enhetstestning fick jag inte riktigt att fungera, och samma med mina controllers. Jag valde även att inte försöka fixa problem i kod från övningarna eller som genereras av doctrine. 
        Det jag valde att göra var att fokusera på att göra små kod fixar samt att öka maintainability i min kod genom att lägga till bättre dokumentering i mina controllers och andra klasser. 
        Jag minskar också komplexitetet i flera klasser genom att ta bort delar som inte används eller förenkla vissa metoder. Bland annat gör jag några ändringar i DeckOfCards. 
    </p>

    <h1>Diskussion</h1>
    <p>

    </p>
{% endblock %}